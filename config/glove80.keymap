/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
/* #include <dt-bindings/zmk/keys.h> */
#include "keys.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
/* #include <dt-bindings/zmk/outputs.h> */


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

    behaviors {
        fbslash: forward_backward_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_BACKWARD_SLASH";
            #binding-cells = <0>;
            bindings = <&kp LT_FSLH >, <&kp LT_BSLH >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n3hash: n3_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_HASH";
            #binding-cells = <0>;
            bindings = <&kp LT_N3 >, <&kp LT_HASH >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n4dollar: n4_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "N4_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp LT_N4 >, <&kp LT_DOLLAR >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n5percent: n5_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "N5_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp LT_N5 >, <&kp LT_PERCENT >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n6caret: n6_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_CARET";
            #binding-cells = <0>;
            bindings = <&kp LT_N6 >, <&kp LT_CARET >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n7amps: n7_amps {
            compatible = "zmk,behavior-mod-morph";
            label = "N7_AMPS";
            #binding-cells = <0>;
            bindings = <&kp LT_N7 >, <&kp LT_AMPS >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n8pipe: n8_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "N8_PIPE";
            #binding-cells = <0>;
            bindings = <&kp LT_N8 >, <&kp LT_PIPE >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n9euro: n9_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "N9_EURO";
            #binding-cells = <0>;
            bindings = <&kp LT_N9 >, <&kp LT_EURO >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        n0qmark: n0_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "N0_QMARK";
            #binding-cells = <0>;
            bindings = <&kp LT_N0 >, <&kp LT_QMARK >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        gravetilde: grave_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_TILDE";
            #binding-cells = <0>;
            bindings = <&kp LT_GRAV >, <&kp LT_TILDE >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        lbktbrc: lbkt_lbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_LBRC";
            #binding-cells = <0>;
            bindings = <&kp LT_LBKT >, <&kp LT_LBRC >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        rbktbrc: rbkt_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "RBKT_RBRC";
            #binding-cells = <0>;
            bindings = <&kp LT_RBKT >, <&kp LT_RBRC >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &lower  &kp LT_STAR  &fbslash   &kp LT_PLUS  &kp LT_MINUS                                                                                        &kp LEFT  &kp DOWN      &kp UP      &kp RIGHT    &kp LT_EQUAL
   &kp CAPS  &kp LT_N1    &kp LT_N2  &n3hash      &n4dollar     &n5percent                                                                  &n6caret  &n7amps   &n8pipe       &n9euro     &n0qmark     &kp LT_UMAC
&kp LT_IOGO  &kp LT_Q     &kp LT_W   &kp LT_D     &kp LT_P      &kp LT_F                                                                    &kp LT_J  &kp LT_L  &kp LT_U      &kp LT_Y    &kp LT_SCAR  &kp LT_ZCAR
   &kp BSPC  &kp LT_A     &kp LT_R   &kp LT_S     &kp LT_T      &kp LT_G                                                                    &kp LT_K  &kp LT_N  &kp LT_E      &kp LT_I    &kp LT_O     &kp LT_UOGO
&kp LT_AOGO  &kp LT_Z     &kp LT_X   &kp LT_C     &kp LT_V      &kp LT_B    &kp LSHFT  &kp LGUI  &kp LCTRL  &kp RCTRL  &kp RGUI  &kp RSHFT  &kp LT_M  &kp LT_H  &kp LT_COMMA  &kp LT_DOT  &kp LT_EDOT  &kp LT_CCAR
&gravetilde  &kp LT_LT    &kp LT_GT  &kp LT_LPAR  &kp LT_RPAR               &kp TAB    &kp ESC   &kp LALT   &kp RALT   &kp RET   &kp SPACE            &lbktbrc  &rbktbrc      &kp LT_SQT  &kp LT_EOGO  &kp LT_UNDER
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
      &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
